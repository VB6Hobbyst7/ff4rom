==============================================================================
Shadowing Stat Data for All Characters			by Phoenix Hacks
FF2us v1.0 (headered ROM)				4/9/11
==============================================================================

==============================================================================
General Info
==============================================================================
1140-1155	Shadow Slot 0	(00)
1156-116B	Shadow Slot 1	(0B)
116C-1181	Shadow Slot 2	(16)
1182-1197	Shadow Slot 3	(21)
1198-11AD	Shadow Slot 4	(2C)
11AE-11C3	Shadow Slot 5	(37)
11C4-11D9	Shadow Slot 6	(42)
11DA-11EF	Shadow Slot 7	(4D)
11F0-1205	Shadow Slot 8	(58)
1206-121B	Shadow Slot 9	(63)
121C-1231	Shadow Slot A	(6E)
1232-1247	Shadow Slot B	(79)
1248-125D	Shadow Slot C	(84)
125E-1273	Shadow Slot D	(8F)

	1140	character id/handedness
	1141	class id
	1142	level
	1143-4	max HP
	1145-6	max MP
	1147	strength
	1148	agility
	1149	vitality
	114A	wisdom
	114B	will
	114C	helmet
	114D	armor
	114E	gauntlet
	114F	right-hand item
	1150	right-hand quantity
	1151	left-hand item
	1152	left-hand quantity
	1153-5	experience


==============================================================================
Changes to Make
==============================================================================
06869: Get rid of Tellah's equipment check: EAEAEAEAEA
0689A: Add character loading order using slot values
0690C: Add slot reference table: 000B16212C37424D58636E79848FFFFFFF
0691D: Add character storing order using slot values
08657: Add character menu name loading order using slot values
B7D3F: Add character battle name loading order using slot values
1EFE7: Make shadow slots not gain experience: 05
6EA18: Add level-up modifiers pointers
6EA40: Add level-up modifiers
(07FF3: To optionally skip equipment check for rejoining characters: 80)

7AC60: Bump stats data, add older Rydia: 910B0F00000000C800C80064006400080B07130E01280A062B00001000062B00D20C1900000000160316033C003C001417110C0C08191909FD0000100009FD00930D32000000006C076C07BE00BE000A140A2828000032F9600F001000F9600F950F32000000007F0B7F0BB400B4000A1E14280A000000F9600F001000F9600F

06687: Adapt final battle for Golbez and FuSoYa: A90E200DE6A20001863DA90D200DE6

0689A: Character loading order: 000102030405060708030903060A01050B0C0D010E

0691D: Character storing order: 000102030405060708030903060A01050B0C0D01

08657: Character name order: 000102030405060708030903060A01050B0C0D01

B7D3F: Battle name order: 000102030405060708030903060A01050B0C0D01

(To skip Golbez's equipment zeroing out, 066B4: 800A)

Level-up Modifiers Pointers (6EA18): 25E8DCE8AEE947EA0DEBC4EB7BEC32EDE9ED47EABBEE47EA7BEC54EFDCE8C4EBAEE9DEEF1DF0DCE8

All level-up modifiers (6EA40):


------------------------------------------------------------------------------

068AF: Determine which character to remove from party:
E886B3BDD5093AAABD1DE78507AABD0CE7C2200A8540A90000A8E220843DB90010F009B90110291FC507F016A53D186940853DA53E6900853EA43DC04001D0DE8017A9038507A63DA440BD0010994011E8C8C607D0F420C8E54CD3E0FF

0068AF	E8		Increment X				0068B0	86 B3		Store X to $00:D+$B3			0068B2	BD D5 09	Load A with 1 byte at $7E:09D5+X	; A = second byte of event (i.e. character ID)0068B5	3A		Decrement A				0068B6	AA		Transfer A to X				0068B7	BD 1D E7	Load A with 1 byte at 00691D+X		
0068BA	85 07		Store A to $00:D+$07			; $07 = desired class ID0068BC	AA		Transfer A to X				0068BD	BD 0C E7	Load A with 1 byte at 00690C+X		; get the "compressed" shadow slot offset0068C0	C2 20		Clear flags #20				0068C2	0A		Left shift bits of A			; shift to get the "uncompressed" number0068C3	85 40		Store A to $00:D+$40			; $40 = offset from $1140 0068C5	A9 00 00	Load A with #0000			0068C8	A8		Transfer A to Y				0068C9	E2 20		Set flags #20				0068CB	84 3D		Store Y to $00:D+$3D			0068CD	B9 00 10	Load A with 1 byte at $7E:1000+Y	; make sure slot0068D0	F0 09		Branch to 0068DB if zero flag is set	; isn't already empty0068D2	B9 01 10	Load A with 1 byte at $7E:1001+Y	0068D5	29 1F		'AND' A with #1F			; get rid of row properties0068D7	C5 07		Compare A with data at $00:D+$07	0068D9	F0 16		Branch to 0068F1 if zero flag is set	0068DB	A5 3D		Load A with 1 byte at $00:D+$3D		0068DD	18		Clear carry flag			0068DE	69 40		Add #40 to A				0068E0	85 3D		Store A to $00:D+$3D			0068E2	A5 3E		Load A with 1 byte at $00:D+$3E		; though this looks like it's not0068E4	69 00		Add #00 to A				; doing anything, it's needed to0068E6	85 3E		Store A to $00:D+$3E			; transfer the carry if there was one0068E8	A4 3D		Load Y with 2 bytes at $00:D+$3D	0068EA	C0 40 01	Compare Y with #0140			0068ED	D0 DE		Branch to 0068CD if zero flag is clear	0068EF	80 17		Branch to 006908			0068F1	A9 03		Load A with #03				0068F3	85 07		Store A to $00:D+$07			; $07 = #03 for repeating 3 times0068F5	A6 3D		Load X with 2 bytes at $00:D+$3D	0068F7	A4 40		Load Y with 2 bytes at $00:D+$40	0068F9	BD 00 10	Load A with 1 byte at $7E:1000+X	0068FC	99 40 11	Store A to $7E:1140+Y			0068FF	E8		Increment X				006900	C8		Increment Y				006901	C6 07		Decrement 1 byte at $00:D+$07		006903	D0 F4		Branch to 0068F9 if zero flag is clear	006905	20 C8 E5	Jump to subroutine at 0067C8		
006908	4C D3 E0	Jump to location 0062D3			

------------------------------------------------------------------------------

067C8: Character -> Shadow routine
A63DBD0910994011C8BD0A10994011C8A9078507A63DBD0D10994011E8C8C607D0F4A90A8507A63DBD3010994011E8C8C607D0F4A63D9E00109E011060FFFFFFFFFFFFFFFF

067C8	A6 3D		Load X with 2 bytes at $00:D+$3D		067CA	BD 09 10	Load A with 1 byte at $7E:1009+X		067CD	99 40 11	Store A to $7E:1140+Y				067D0	C8		Increment Y					067D1	BD 0A 10	Load A with 1 byte at $7E:100A+X		067D4	99 40 11	Store A to $7E:1140+Y				067D7	C8		Increment Y					067D8	A9 07		Load A with #07					067DA	85 07		Store A to $00:D+$07				067DC	A6 3D		Load X with 2 bytes at $00:D+$3D		067DE	BD 0D 10	Load A with 1 byte at $7E:100D+X		067E1	99 40 11	Store A to $7E:1140+Y				067E4	E8		Increment X					067E5	C8		Increment Y					067E6	C6 07		Decrement 1 byte at $00:D+$07			067E8	D0 F4		Branch to 067DE if zero flag is clear		067EA	A9 0A		Load A with #0A					067EC	85 07		Store A to $00:D+$07				067EE	A6 3D		Load X with 2 bytes at $00:D+$3D		067F0	BD 30 10	Load A with 1 byte at $7E:1030+X		067F3	99 40 11	Store A to $7E:1140+Y				067F6	E8		Increment X					067F7	C8		Increment Y					067F8	C6 07		Decrement 1 byte at $00:D+$07			067FA	D0 F4		Branch to 067F0 if zero flag is clear		067FC	A6 3D		Load X with 2 bytes at $00:D+$3D		067FE	9E 00 10	Store 0 to $7E:1000+X				
06801	9E 01 10	Store 0 to $7E:1001+X				06804	60		Return from subroutine				

------------------------------------------------------------------------------

0679C: Load from shadow data if available or else from initial data:
3AA8B99AE68507A8B90CE7C2200A8540A90000E220A640BD4011F0052031FD8005A507200DE64CD3E0FFFFFF

0679C	3A		Decrement A					0679D	A8		Transfer A to Y					0679E	B9 9A E6	Load A with 1 byte at $7E:E69A+Y		067A1	85 07		Store A to $00:D+$07				067A3	A8		Transfer A to Y					067A4	B9 0C E7	Load A with 1 byte at $7E:E70C+Y		067A7	C2 20		Clear flags #20					067A9	0A		Left shift bits of A				067AA	85 40		Store A to $00:D+$40				067AC	A9 00 00	Load A with #0000				067AF	E2 20		Set flags #20					067B1	A6 40		Load X with 2 bytes at $00:D+$40		067B3	BD 40 11	Load A with 1 byte at $7E:1140+X		067B6	F0 05		Branch to 067BD if zero flag is set		067B8	20 31 FD	Jump to subroutine at 07F31			067BB	80 05		Branch to 067C2					067BD	A5 07		Load A with 1 byte at $00:D+$07			067BF	20 0D E6	Jump to subroutine at 0680D			067C2	4C D3 E0	Jump to location 062D3				
------------------------------------------------------------------------------

07F31: Shadow -> Character routine
29E08507A43DA6B3BDD5090507990010A640BD4111990110BD4211990210A900990310990410990510990610BD4311990910BD4411990A10A9078507A43DBD4511990D10E8C8C607D0F4A90A8507A43DBD4511993010E8C8C607D0F4A43DB90910990710B90A10990810B90D10990B10B90E10990C10A6B3BDD5093A0AAABF18E80D857EBF19E80D857FA90D8580B90210C9469002A9453A85070A186507A8A63DB77E9D3F10C8B77E9D3E10C8B77E9D3D10A640BD4011291F8507A6B3BDD509C507F0042063E660208AE660

07F31	29 E0		'AND' A with #E0				
07F33	85 07		Store A to $00:D+$07				
07F35	A4 3D		Load Y with 2 bytes at $00:D+$3D		
07F37	A6 B3		Load X with 2 bytes at $00:D+$B3		
07F39	BD D5 09	Load A with 1 byte at $7E:09D5+X		
07F3C	05 07		'OR' A with 1 byte at $00:D+$07			
07F3E	99 00 10	Store A to $7E:1000+Y				
07F41	A6 40		Load X with 2 bytes at $00:D+$40		
07F43	BD 41 11	Load A with 1 byte at $7E:1141+X		
07F46	99 01 10	Store A to $7E:1001+Y				
07F49	BD 42 11	Load A with 1 byte at $7E:1142+X		
07F4C	99 02 10	Store A to $7E:1002+Y				
07F4F	A9 00		Load A with #00					
07F51	99 03 10	Store A to $7E:1003+Y				
07F54	99 04 10	Store A to $7E:1004+Y				
07F57	99 05 10	Store A to $7E:1005+Y				
07F5A	99 06 10	Store A to $7E:1006+Y				
07F5D	BD 43 11	Load A with 1 byte at $7E:1143+X		
07F60	99 09 10	Store A to $7E:1009+Y				
07F63	BD 44 11	Load A with 1 byte at $7E:1144+X		
07F66	99 0A 10	Store A to $7E:100A+Y				
07F69	A9 07		Load A with #07					
07F6B	85 07		Store A to $00:D+$07				
07F6D	A4 3D		Load Y with 2 bytes at $00:D+$3D		
07F6F	BD 45 11	Load A with 1 byte at $7E:1145+X		
07F72	99 0D 10	Store A to $7E:100D+Y				
07F75	E8		Increment X					
07F76	C8		Increment Y					
07F77	C6 07		Decrement 1 byte at $00:D+$07			
07F79	D0 F4		Branch to 07F6F if zero flag is clear		
07F7B	A9 0A		Load A with #0A					
07F7D	85 07		Store A to $00:D+$07				
07F7F	A4 3D		Load Y with 2 bytes at $00:D+$3D		
07F81	BD 45 11	Load A with 1 byte at $7E:1145+X		
07F84	99 30 10	Store A to $7E:1030+Y				
07F87	E8		Increment X					
07F88	C8		Increment Y					
07F89	C6 07		Decrement 1 byte at $00:D+$07			
07F8B	D0 F4		Branch to 07F81 if zero flag is clear		
07F8D	A4 3D		Load Y with 2 bytes at $00:D+$3D		
07F8F	B9 09 10	Load A with 1 byte at $7E:1009+Y		
07F92	99 07 10	Store A to $7E:1007+Y				
07F95	B9 0A 10	Load A with 1 byte at $7E:100A+Y		
07F98	99 08 10	Store A to $7E:1008+Y				
07F9B	B9 0D 10	Load A with 1 byte at $7E:100D+Y		
07F9E	99 0B 10	Store A to $7E:100B+Y				
07FA1	B9 0E 10	Load A with 1 byte at $7E:100E+Y		
07FA4	99 0C 10	Store A to $7E:100C+Y				
07FA7	A6 B3		Load X with 2 bytes at $00:D+$B3		
07FA9	BD D5 09	Load A with 1 byte at $7E:09D5+X		
07FAC	3A		Decrement A					
07FAD	0A		Left shift bits of A				
07FAE	AA		Transfer A to X					
07FAF	BF 18 E8 0D	Load A with 1 byte at 6EA18+X			
07FB3	85 7E		Store A to $00:D+$7E				; used to be +$80
07FB5	BF 19 E8 0D	Load A with 1 byte at 6EA19+X			
07FB9	85 7F		Store A to $00:D+$7F				; watch for errors here
07FBB	A9 0D		Load A with #0D					
07FBD	85 80		Store A to $00:D+$80				
07FBF	B9 02 10	Load A with 1 byte at $7E:1002+Y		
07FC2	C9 46		Compare A with #46				
07FC4	90 02		Branch to 07FC8 if carry is clear		
07FC6	A9 45		Load A with #45					
07FC8	3A		Decrement A					
07FC9	85 07		Store A to $00:D+$07				
07FCB	0A		Left shift bits of A				
07FCC	18		Clear carry flag				
07FCD	65 07		Add 1 byte at $00:D+$07 to A			
07FCF	A8		Transfer A to Y					
07FD0	A6 3D		Load X with 2 bytes at $00:D+$3D		
07FD2	B7 7E		Load A with 1 byte at $[3 bytes at $00:D+$7E]+Y	
07FD4	9D 3F 10	Store A to $7E:103F+X				
07FD7	C8		Increment Y					
07FD8	B7 7E		Load A with 1 byte at $[3 bytes at $00:D+$7E]+Y	
07FDA	9D 3E 10	Store A to $7E:103E+X				
07FDD	C8		Increment Y					
07FDE	B7 7E		Load A with 1 byte at $[3 bytes at $00:D+$7E]+Y	
07FE0	9D 3D 10	Store A to $7E:103D+X				
07FE3	A6 40		Load X with 2 bytes at $00:D+$40		
07FE5	BD 40 11	Load A with 1 byte at $7E:1140+X		
07FE8	29 1F		'AND' A with #1F				
07FEA	85 07		Store A to $00:D+$07				
07FEC	A6 B3		Load X with 2 bytes at $00:D+$B3		
07FEE	BD D5 09	Load A with 1 byte at $7E:09D5+X		
07FF1	C5 07		Compare A with data at $00:D+$07		
07FF3	F0 04		Branch to 07FF9 if zero flag is set		
07FF5	20 63 E6	Jump to subroutine at 06863			
07FF8	60		Return from subroutine				
07FF9	20 8A E6	Jump to subroutine at 0688A			
07FFC	60		Return from subroutine				
